package GameOfLife;

import java.awt.Point;
import java.util.Arrays;
import java.util.ArrayList;

public class RulesOfLife {

    public static void computeSurvivors(boolean[][] gameBoard, ArrayList<Point> survivingCells) {
        for (int i = 1; i < gameBoard.length - 1; i++) {
            for (int j = 1; j < gameBoard[0].length - 1; j++) {
                int surrounding = 0;
                surrounding += (gameBoard[i-1][j-1] ? 1 : 0);
                surrounding += (gameBoard[i-1][j] ? 1 : 0);
                surrounding += (gameBoard[i-1][j+1] ? 1 : 0);
                surrounding += (gameBoard[i][j-1] ? 1 : 0);
                surrounding += (gameBoard[i][j+1] ? 1 : 0);
                surrounding += (gameBoard[i+1][j-1] ? 1 : 0);
                surrounding += (gameBoard[i+1][j] ? 1 : 0);
                surrounding += (gameBoard[i+1][j+1] ? 1 : 0);

                applyRules(gameBoard, survivingCells, i, j, surrounding);
            }
        }
    }

    private static void applyRules(boolean[][] gameBoard, ArrayList<Point> survivingCells, int i, int j, int surrounding) {
        if ((gameBoard[i][j]) && (surrounding == 2)) {
            survivingCells.add(new Point(i-1, j-1));
        }
        if ((gameBoard[i][j]) && (surrounding == 3)) {
            survivingCells.add(new Point(i-1, j-1));
        }
        if ((!gameBoard[i][j]) && (surrounding == 3)) {
            survivingCells.add(new Point(i-1, j-1));
        }
    }

    public static ArrayList<Point> getCoordinates() {
        ArrayList<Point> coordinates;
        coordinates = new ArrayList<>(Arrays.asList(
            new Point(1, 5),
            new Point(2, 6),
            new Point(3, 5),
            new Point(3, 6),
            new Point(11, 5),
            new Point(11, 6),
            new Point(11, 7),
            new Point(12, 4),
            new Point(12, 8),
            new Point(13, 3),
            new Point(13, 9),
            new Point(14, 3),
            new Point(14, 9),
            new Point(15, 6),
            new Point(16, 4),
            new Point(16, 8),
            new Point(17, 5),
            new Point(17, 6),
            new Point(17, 7),
            new Point(21, 3),
            new Point(21, 4),
            new Point(21, 5),
            new Point(22, 3),
            new Point(22, 4),
            new Point(22, 5),
            new Point(23, 2),
            new Point(23, 6),
            new Point(25, 2),
            new Point(25, 6),
            new Point(35, 3),
            new Point(35, 4),
            new Point(36, 3),
            new Point(36, 4)
        ));
        return coordinates;
    }
}
