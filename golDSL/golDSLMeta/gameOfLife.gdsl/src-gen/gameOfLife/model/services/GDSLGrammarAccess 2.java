/*
 * generated by Xtext 2.36.0
 */
package gameOfLife.model.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGridAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGridGridParserRuleCall_0_0 = (RuleCall)cGridAssignment_0.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//Model:
		//    grid=Grid? // Optional grid definition
		//    rules+=Rule*;
		@Override public ParserRule getRule() { return rule; }
		
		//grid=Grid? // Optional grid definition
		//rules+=Rule*
		public Group getGroup() { return cGroup; }
		
		//grid=Grid?
		public Assignment getGridAssignment_0() { return cGridAssignment_0; }
		
		//Grid
		public RuleCall getGridGridParserRuleCall_0_0() { return cGridGridParserRuleCall_0_0; }
		
		//// Optional grid definition
		//   rules+=Rule*
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
	}
	public class GridElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.Grid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGridKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRangesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRangesRangeParserRuleCall_1_0 = (RuleCall)cRangesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRangesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRangesRangeParserRuleCall_2_1_0 = (RuleCall)cRangesAssignment_2_1.eContents().get(0);
		
		//Grid:
		//    'Grid' ranges+=Range (':' ranges+=Range)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Grid' ranges+=Range (':' ranges+=Range)*
		public Group getGroup() { return cGroup; }
		
		//'Grid'
		public Keyword getGridKeyword_0() { return cGridKeyword_0; }
		
		//ranges+=Range
		public Assignment getRangesAssignment_1() { return cRangesAssignment_1; }
		
		//Range
		public RuleCall getRangesRangeParserRuleCall_1_0() { return cRangesRangeParserRuleCall_1_0; }
		
		//(':' ranges+=Range)*
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//ranges+=Range
		public Assignment getRangesAssignment_2_1() { return cRangesAssignment_2_1; }
		
		//Range
		public RuleCall getRangesRangeParserRuleCall_2_1_0() { return cRangesRangeParserRuleCall_2_1_0; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartINTTerminalRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndINTTerminalRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//Range:
		//    start=INT '-' end=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//start=INT '-' end=INT
		public Group getGroup() { return cGroup; }
		
		//start=INT
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_0_0() { return cStartINTTerminalRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//end=INT
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_2_0() { return cEndINTTerminalRuleCall_2_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStateCellStateEnumRuleCall_0_0 = (RuleCall)cStateAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionActionEnumRuleCall_4_0 = (RuleCall)cActionAssignment_4.eContents().get(0);
		
		//Rule: state = CellState ':' condition=Condition ':' action=Action;
		@Override public ParserRule getRule() { return rule; }
		
		//state = CellState ':' condition=Condition ':' action=Action
		public Group getGroup() { return cGroup; }
		
		//state = CellState
		public Assignment getStateAssignment_0() { return cStateAssignment_0; }
		
		//CellState
		public RuleCall getStateCellStateEnumRuleCall_0_0() { return cStateCellStateEnumRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//action=Action
		public Assignment getActionAssignment_4() { return cActionAssignment_4; }
		
		//Action
		public RuleCall getActionActionEnumRuleCall_4_0() { return cActionActionEnumRuleCall_4_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorRelationalOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Condition:
		//    operator=RelationalOperator value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=RelationalOperator value=INT
		public Group getGroup() { return cGroup; }
		
		//operator=RelationalOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorEnumRuleCall_0_0() { return cOperatorRelationalOperatorEnumRuleCall_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	
	public class CellStateElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.CellState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALIVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALIVEAliveKeyword_0_0 = (Keyword)cALIVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEADEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDEADDeadKeyword_1_0 = (Keyword)cDEADEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CellState:
		//    ALIVE = 'alive' |
		//    DEAD = 'dead';
		public EnumRule getRule() { return rule; }
		
		//ALIVE = 'alive' |
		//DEAD = 'dead'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ALIVE = 'alive'
		public EnumLiteralDeclaration getALIVEEnumLiteralDeclaration_0() { return cALIVEEnumLiteralDeclaration_0; }
		
		//'alive'
		public Keyword getALIVEAliveKeyword_0_0() { return cALIVEAliveKeyword_0_0; }
		
		//DEAD = 'dead'
		public EnumLiteralDeclaration getDEADEnumLiteralDeclaration_1() { return cDEADEnumLiteralDeclaration_1; }
		
		//'dead'
		public Keyword getDEADDeadKeyword_1_0() { return cDEADDeadKeyword_1_0; }
	}
	public class RelationalOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESS_THANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESS_THANLessThanSignKeyword_0_0 = (Keyword)cLESS_THANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEQUALEqualsSignKeyword_1_0 = (Keyword)cEQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATER_THANGreaterThanSignKeyword_2_0 = (Keyword)cGREATER_THANEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum RelationalOperator:
		//    LESS_THAN = '<' |
		//    EQUAL = '=' |
		//    GREATER_THAN = '>';
		public EnumRule getRule() { return rule; }
		
		//LESS_THAN = '<' |
		//EQUAL = '=' |
		//GREATER_THAN = '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS_THAN = '<'
		public EnumLiteralDeclaration getLESS_THANEnumLiteralDeclaration_0() { return cLESS_THANEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLESS_THANLessThanSignKeyword_0_0() { return cLESS_THANLessThanSignKeyword_0_0; }
		
		//EQUAL = '='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_1() { return cEQUALEnumLiteralDeclaration_1; }
		
		//'='
		public Keyword getEQUALEqualsSignKeyword_1_0() { return cEQUALEqualsSignKeyword_1_0; }
		
		//GREATER_THAN = '>'
		public EnumLiteralDeclaration getGREATER_THANEnumLiteralDeclaration_2() { return cGREATER_THANEnumLiteralDeclaration_2; }
		
		//'>'
		public Keyword getGREATER_THANGreaterThanSignKeyword_2_0() { return cGREATER_THANGreaterThanSignKeyword_2_0; }
	}
	public class ActionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSURVIVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSURVIVESurviveKeyword_0_0 = (Keyword)cSURVIVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBECOME_ALIVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBECOME_ALIVEBecomeAliveKeyword_1_0 = (Keyword)cBECOME_ALIVEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Action:
		//    SURVIVE = 'survive' |
		//    BECOME_ALIVE = 'becomeAlive';
		public EnumRule getRule() { return rule; }
		
		//SURVIVE = 'survive' |
		//BECOME_ALIVE = 'becomeAlive'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SURVIVE = 'survive'
		public EnumLiteralDeclaration getSURVIVEEnumLiteralDeclaration_0() { return cSURVIVEEnumLiteralDeclaration_0; }
		
		//'survive'
		public Keyword getSURVIVESurviveKeyword_0_0() { return cSURVIVESurviveKeyword_0_0; }
		
		//BECOME_ALIVE = 'becomeAlive'
		public EnumLiteralDeclaration getBECOME_ALIVEEnumLiteralDeclaration_1() { return cBECOME_ALIVEEnumLiteralDeclaration_1; }
		
		//'becomeAlive'
		public Keyword getBECOME_ALIVEBecomeAliveKeyword_1_0() { return cBECOME_ALIVEBecomeAliveKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final GridElements pGrid;
	private final RangeElements pRange;
	private final RuleElements pRule;
	private final CellStateElements eCellState;
	private final ConditionElements pCondition;
	private final RelationalOperatorElements eRelationalOperator;
	private final ActionElements eAction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGrid = new GridElements();
		this.pRange = new RangeElements();
		this.pRule = new RuleElements();
		this.eCellState = new CellStateElements();
		this.pCondition = new ConditionElements();
		this.eRelationalOperator = new RelationalOperatorElements();
		this.eAction = new ActionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("gameOfLife.model.GDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    grid=Grid? // Optional grid definition
	//    rules+=Rule*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Grid:
	//    'Grid' ranges+=Range (':' ranges+=Range)*
	//;
	public GridElements getGridAccess() {
		return pGrid;
	}
	
	public ParserRule getGridRule() {
		return getGridAccess().getRule();
	}
	
	//Range:
	//    start=INT '-' end=INT
	//;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//Rule: state = CellState ':' condition=Condition ':' action=Action;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//enum CellState:
	//    ALIVE = 'alive' |
	//    DEAD = 'dead';
	public CellStateElements getCellStateAccess() {
		return eCellState;
	}
	
	public EnumRule getCellStateRule() {
		return getCellStateAccess().getRule();
	}
	
	//Condition:
	//    operator=RelationalOperator value=INT;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//enum RelationalOperator:
	//    LESS_THAN = '<' |
	//    EQUAL = '=' |
	//    GREATER_THAN = '>';
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return eRelationalOperator;
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//enum Action:
	//    SURVIVE = 'survive' |
	//    BECOME_ALIVE = 'becomeAlive';
	public ActionElements getActionAccess() {
		return eAction;
	}
	
	public EnumRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
