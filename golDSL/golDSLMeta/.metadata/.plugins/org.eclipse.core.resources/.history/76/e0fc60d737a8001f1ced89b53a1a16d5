package gameOfLife.model.generator

import gameOfLife.model.gDSL.Model
import gameOfLife.model.gDSL.Rule

class TextGenerator {

    def static CharSequence toText(Model root) '''
        package GameOfLife;

        import java.awt.Point;
        import java.util.ArrayList;

        public class RulesOfLife {

            public static void computeSurvivors(boolean[][] gameBoard, ArrayList<Point> survivingCells) {
                for (int i = 1; i < gameBoard.length - 1; i++) {
                    for (int j = 1; j < gameBoard[0].length - 1; j++) {
                        int surrounding = 0;
                        surrounding += (gameBoard[i-1][j-1] ? 1 : 0);
                        surrounding += (gameBoard[i-1][j] ? 1 : 0);
                        surrounding += (gameBoard[i-1][j+1] ? 1 : 0);
                        surrounding += (gameBoard[i][j-1] ? 1 : 0);
                        surrounding += (gameBoard[i][j+1] ? 1 : 0);
                        surrounding += (gameBoard[i+1][j-1] ? 1 : 0);
                        surrounding += (gameBoard[i+1][j] ? 1 : 0);
                        surrounding += (gameBoard[i+1][j+1] ? 1 : 0);

                        applyRules(gameBoard, survivingCells, i, j, surrounding);
                    }
                }
            }

            private static void applyRules(boolean[][] gameBoard, ArrayList<Point> survivingCells, int i, int j, int surrounding) {
                «FOR rule : root.rules»
                if ((gameBoard[i][j] == «rule.state.literal.equals("alive")»)
                    && (surrounding «rule.condition.operator.literal» «rule.condition.value»)) {
                    «IF rule.action.literal.equals("die")»
                    // Cell dies, do nothing
                    «ELSE»
                    survivingCells.add(new Point(i-1, j-1));
                    «ENDIF»
                }
                «ENDFOR»
            }
        }
    '''
}